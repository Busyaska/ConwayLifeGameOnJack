class Game {
    
    static int width, height, isInitialized;
    field Array curGen;

    constructor Game new () {
        if (isInitialized = 0) {
            do Game.init();
        }
        let curGen = Game.getNewArray();
        do Game.initSpace(curGen);
        return this;
    }

    function void init() {
        let width = 64;
        let height = 32;
        let isInitialized = 1;
        return;
    }

    function Array getNewArray() {
        var int i;
        var Array array;
        let i = 0;
        let array = Array.new(height);

        while (~(i = height)) {
            let array[i] = Array.new(width);
            let i = i + 1;
        } 

        return array;
    }

    function int getWidth() {
        return width;
    }

    function int getHeight() {
        return height;
    }

    function void initSpace (Array array) {
        var Array innerArray;
        var int curWidth, curHeight, value;
        let curHeight = 0;
        
        while (~(curHeight = height)) {
            let curWidth = 0;
            while (~(curWidth = width)) {
                let innerArray = array[curHeight];
                let value = ((curWidth * 17 + curHeight * 31 + 47) & 1);
                let innerArray[curWidth] = value;

                let curWidth = curWidth + 1;
            }

            let curHeight = curHeight + 1;
        }

        let innerArray = null;
        return;
    }

    function int countAliveNeighbours (Array array, int x, int y) {
        var Array innerArray;
        var int count, tempX, tempY, dx, dy;
        let count = 0;
        let dy = -1;
        
        while ((dy < 1) | (dy = 1)) {
            let dx = -1;
            while ((dx < 1) | (dx = 1)) {
                let tempX = x + dx;
                let tempY = y + dy;
                if (~((dx = 0) & (dy = 0))) {
                    if (((tempX > 0) | (tempX = 0)) & (tempX < width) & ((tempY > 0) | (tempY = 0)) & (tempY < height)) {
                        let innerArray = array[tempY];
                        if (innerArray[tempX] = 1) {
                            let count = count + 1;
                        }
                    }
                }
                let dx = dx + 1;
            }
            let dy = dy + 1;
        }

        let innerArray = null;
        return count;
    }

    method void update () {
        var Array nextGen, innerArrayCur, innerArrayNext;
        var int curWidth, curHeight, neighboursCount, temp;    
        let nextGen = Game.getNewArray();
        let curWidth = 0;

        while (~(height = curHeight)) {            
            let curWidth = 0;
            let neighboursCount = 0;
            while (~(width = curWidth)) {
                let innerArrayCur = curGen[curHeight];
                let innerArrayNext = nextGen[curHeight];
                let neighboursCount = Game.countAliveNeighbours(curGen, curWidth, curHeight);

                let temp = innerArrayCur[curWidth];
                if (temp = 1) {
                    if (neighboursCount < 2) {
                        let innerArrayNext[curWidth] = 0;
                    } else {
                        if ((neighboursCount = 2) | (neighboursCount = 3)) {
                            let innerArrayNext[curWidth] = 1;
                        } else {
                            let innerArrayNext[curWidth] = 0;
                        }
                    }
                } else {
                    if (neighboursCount = 3) {
                        let innerArrayNext[curWidth] = 1;
                    } else {
                        let innerArrayNext[curWidth] = 0;
                    }
                }
                let curWidth = curWidth + 1;
            }

            let curHeight = curHeight + 1;
        }

        let curHeight = 0;
        while (~(height = curHeight)) {            
            let curWidth = 0;
            while (~(width = curWidth)) {
                let innerArrayCur = curGen[curHeight];
                let innerArrayNext = nextGen[curHeight];
                let temp = innerArrayNext[curWidth];
                let innerArrayCur[curWidth] = temp;
                let curWidth = curWidth + 1;
            }
            let curHeight = curHeight + 1;
        }
        
        do Game.clearArray(nextGen);
        let nextGen = null;
        let innerArrayCur = null;
        let innerArrayNext = null;
        return;
    }

    method Array getCurrentGeneration() {
        return curGen;
    }

    function void clearArray (Array array) {
        var int curHeight;
        var Array curArray;
        let curHeight = 0;

        while (~(height = curHeight)) {
            let curArray = array[curHeight];
            do curArray.dispose();
            let curHeight = curHeight + 1;
        }

        do array.dispose();
        return;
    }

    method void clear() {
        do Game.clearArray(curGen);
        let curGen = null;
        return;
    }
}