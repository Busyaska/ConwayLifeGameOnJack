function Game.new 0
push constant 1
call Memory.alloc 1
pop pointer 0
push static 2
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
call Game.init 0
pop temp 0
label IF_FALSE0
call Game.getNewArray 0
pop this 0
push this 0
call Game.initSpace 1
pop temp 0
push pointer 0
return
function Game.init 0
push constant 64
pop static 0
push constant 32
pop static 1
push constant 1
pop static 2
push constant 0
return
function Game.getNewArray 2
push constant 0
pop local 0
push static 1
call Array.new 1
pop local 1
label WHILE_EXP0
push local 0
push static 1
eq
not
not
if-goto WHILE_END0
push local 0
push local 1
add
push static 0
call Array.new 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Game.getWidth 0
push static 0
return
function Game.getHeight 0
push static 1
return
function Game.initSpace 4
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push static 1
eq
not
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push static 0
eq
not
not
if-goto WHILE_END1
push local 2
push argument 0
add
pop pointer 1
push that 0
pop local 0
push local 1
push constant 17
call Math.multiply 2
push local 2
add
push constant 31
call Math.multiply 2
push constant 47
add
push constant 1
and
pop local 3
push local 1
push local 0
add
push local 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
push constant 0
return
function Game.countAliveNeighbours 6
push constant 0
pop local 1
push constant 1
neg
pop local 5
label WHILE_EXP0
push local 5
push constant 1
lt
push local 5
push constant 1
eq
or
not
if-goto WHILE_END0
push constant 1
neg
pop local 4
label WHILE_EXP1
push local 4
push constant 1
lt
push local 4
push constant 1
eq
or
not
if-goto WHILE_END1
push argument 1
push local 4
add
pop local 2
push argument 2
push local 5
add
pop local 3
push local 4
push constant 0
eq
push local 5
push constant 0
eq
and
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push constant 0
gt
push local 2
push constant 0
eq
or
push local 2
push static 0
lt
and
push local 3
push constant 0
gt
push local 3
push constant 0
eq
or
and
push local 3
push static 1
lt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 3
push argument 0
add
pop pointer 1
push that 0
pop local 0
push local 2
push local 0
add
pop pointer 1
push that 0
push constant 1
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 1
push constant 1
add
pop local 1
label IF_FALSE2
label IF_FALSE1
label IF_FALSE0
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP1
label WHILE_END1
push local 5
push constant 1
add
pop local 5
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
push local 1
return
function Game.update 7
push argument 0
pop pointer 0
call Game.getNewArray 0
pop local 0
push constant 0
pop local 3
label WHILE_EXP0
push static 1
push local 4
eq
not
not
if-goto WHILE_END0
push constant 0
pop local 3
push constant 0
pop local 5
label WHILE_EXP1
push static 0
push local 3
eq
not
not
if-goto WHILE_END1
push local 4
push this 0
add
pop pointer 1
push that 0
pop local 1
push local 4
push local 0
add
pop pointer 1
push that 0
pop local 2
push this 0
push local 3
push local 4
call Game.countAliveNeighbours 3
pop local 5
push local 3
push local 1
add
pop pointer 1
push that 0
pop local 6
push local 6
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 5
push constant 2
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 3
push local 2
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END1
label IF_FALSE1
push local 5
push constant 2
eq
push local 5
push constant 3
eq
or
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 3
push local 2
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END2
label IF_FALSE2
push local 3
push local 2
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END2
label IF_END1
goto IF_END0
label IF_FALSE0
push local 5
push constant 3
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 3
push local 2
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END3
label IF_FALSE3
push local 3
push local 2
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END3
label IF_END0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP1
label WHILE_END1
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 4
label WHILE_EXP2
push static 1
push local 4
eq
not
not
if-goto WHILE_END2
push constant 0
pop local 3
label WHILE_EXP3
push static 0
push local 3
eq
not
not
if-goto WHILE_END3
push local 4
push this 0
add
pop pointer 1
push that 0
pop local 1
push local 4
push local 0
add
pop pointer 1
push that 0
pop local 2
push local 3
push local 2
add
pop pointer 1
push that 0
pop local 6
push local 3
push local 1
add
push local 6
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP3
label WHILE_END3
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP2
label WHILE_END2
push local 0
call Game.clearArray 1
pop temp 0
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
push constant 0
return
function Game.getCurrentGeneration 0
push argument 0
pop pointer 0
push this 0
return
function Game.clearArray 2
push constant 0
pop local 0
label WHILE_EXP0
push static 1
push local 0
eq
not
not
if-goto WHILE_END0
push local 0
push argument 0
add
pop pointer 1
push that 0
pop local 1
push local 1
call Array.dispose 1
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push argument 0
call Array.dispose 1
pop temp 0
push constant 0
return
function Game.clear 0
push argument 0
pop pointer 0
push this 0
call Game.clearArray 1
pop temp 0
push constant 0
pop this 0
push constant 0
return
